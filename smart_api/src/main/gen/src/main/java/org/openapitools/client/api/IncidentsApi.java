/*
 * Smart Cities API
 * API documentation for Smart Cities application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Incident;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IncidentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IncidentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IncidentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiIncidentsGet
     * @param status Filter incidents by status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of incidents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIncidentsGetCall(String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/incidents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIncidentsGetValidateBeforeCall(String status, final ApiCallback _callback) throws ApiException {
        return apiIncidentsGetCall(status, _callback);

    }

    /**
     * Get all incidents
     * 
     * @param status Filter incidents by status (optional)
     * @return List&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of incidents </td><td>  -  </td></tr>
     </table>
     */
    public List<Incident> apiIncidentsGet(String status) throws ApiException {
        ApiResponse<List<Incident>> localVarResp = apiIncidentsGetWithHttpInfo(status);
        return localVarResp.getData();
    }

    /**
     * Get all incidents
     * 
     * @param status Filter incidents by status (optional)
     * @return ApiResponse&lt;List&lt;Incident&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of incidents </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Incident>> apiIncidentsGetWithHttpInfo(String status) throws ApiException {
        okhttp3.Call localVarCall = apiIncidentsGetValidateBeforeCall(status, null);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all incidents (asynchronously)
     * 
     * @param status Filter incidents by status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of incidents </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIncidentsGetAsync(String status, final ApiCallback<List<Incident>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIncidentsGetValidateBeforeCall(status, _callback);
        Type localVarReturnType = new TypeToken<List<Incident>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIncidentsIdDelete
     * @param id Incident ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Incident deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIncidentsIdDeleteCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/incidents/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIncidentsIdDeleteValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiIncidentsIdDelete(Async)");
        }

        return apiIncidentsIdDeleteCall(id, _callback);

    }

    /**
     * Delete incident
     * 
     * @param id Incident ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Incident deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiIncidentsIdDelete(UUID id) throws ApiException {
        apiIncidentsIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete incident
     * 
     * @param id Incident ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Incident deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiIncidentsIdDeleteWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = apiIncidentsIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete incident (asynchronously)
     * 
     * @param id Incident ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Incident deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIncidentsIdDeleteAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIncidentsIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIncidentsIdGet
     * @param id Incident ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Incident details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIncidentsIdGetCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/incidents/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIncidentsIdGetValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiIncidentsIdGet(Async)");
        }

        return apiIncidentsIdGetCall(id, _callback);

    }

    /**
     * Get incident by ID
     * 
     * @param id Incident ID (required)
     * @return Incident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Incident details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public Incident apiIncidentsIdGet(UUID id) throws ApiException {
        ApiResponse<Incident> localVarResp = apiIncidentsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get incident by ID
     * 
     * @param id Incident ID (required)
     * @return ApiResponse&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Incident details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Incident> apiIncidentsIdGetWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = apiIncidentsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get incident by ID (asynchronously)
     * 
     * @param id Incident ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Incident details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIncidentsIdGetAsync(UUID id, final ApiCallback<Incident> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIncidentsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIncidentsIdPut
     * @param id Incident ID (required)
     * @param incident  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Incident updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIncidentsIdPutCall(UUID id, Incident incident, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incident;

        // create path and map variables
        String localVarPath = "/api/incidents/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIncidentsIdPutValidateBeforeCall(UUID id, Incident incident, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiIncidentsIdPut(Async)");
        }

        // verify the required parameter 'incident' is set
        if (incident == null) {
            throw new ApiException("Missing the required parameter 'incident' when calling apiIncidentsIdPut(Async)");
        }

        return apiIncidentsIdPutCall(id, incident, _callback);

    }

    /**
     * Update incident
     * 
     * @param id Incident ID (required)
     * @param incident  (required)
     * @return Incident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Incident updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public Incident apiIncidentsIdPut(UUID id, Incident incident) throws ApiException {
        ApiResponse<Incident> localVarResp = apiIncidentsIdPutWithHttpInfo(id, incident);
        return localVarResp.getData();
    }

    /**
     * Update incident
     * 
     * @param id Incident ID (required)
     * @param incident  (required)
     * @return ApiResponse&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Incident updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Incident> apiIncidentsIdPutWithHttpInfo(UUID id, Incident incident) throws ApiException {
        okhttp3.Call localVarCall = apiIncidentsIdPutValidateBeforeCall(id, incident, null);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update incident (asynchronously)
     * 
     * @param id Incident ID (required)
     * @param incident  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Incident updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Incident not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIncidentsIdPutAsync(UUID id, Incident incident, final ApiCallback<Incident> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIncidentsIdPutValidateBeforeCall(id, incident, _callback);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiIncidentsPost
     * @param incident  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Incident created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIncidentsPostCall(Incident incident, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incident;

        // create path and map variables
        String localVarPath = "/api/incidents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiIncidentsPostValidateBeforeCall(Incident incident, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'incident' is set
        if (incident == null) {
            throw new ApiException("Missing the required parameter 'incident' when calling apiIncidentsPost(Async)");
        }

        return apiIncidentsPostCall(incident, _callback);

    }

    /**
     * Create new incident
     * 
     * @param incident  (required)
     * @return Incident
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Incident created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public Incident apiIncidentsPost(Incident incident) throws ApiException {
        ApiResponse<Incident> localVarResp = apiIncidentsPostWithHttpInfo(incident);
        return localVarResp.getData();
    }

    /**
     * Create new incident
     * 
     * @param incident  (required)
     * @return ApiResponse&lt;Incident&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Incident created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Incident> apiIncidentsPostWithHttpInfo(Incident incident) throws ApiException {
        okhttp3.Call localVarCall = apiIncidentsPostValidateBeforeCall(incident, null);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new incident (asynchronously)
     * 
     * @param incident  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Incident created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiIncidentsPostAsync(Incident incident, final ApiCallback<Incident> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiIncidentsPostValidateBeforeCall(incident, _callback);
        Type localVarReturnType = new TypeToken<Incident>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
